#의존 역전 원칙 (Dependency inversion principle)

## 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안 된다. 저수준 모듈이 고수준 모듈에서 정의한 추상 타입에 의존해야 한다.
실무 코드에서 고수준 모듈은 추상화 객체가 많고 하위 모듈에는 그것을 구현하는 객체를 많이 보았습니다.

## 5.1 고수준 모듈이 저수준 모듈에 의존할 때의 문제
소스를 유지보수할 때에 구현(상세) 부분에서의 변경은 필수입니다.
하지만, 코드의 방향이 잡혀 있는 상위 모듈이 상세 변경에 영향을 많이 받게 되면 소스의 수정이 크게 발생합니다.
저수준 모듈이 변경되더라도 고수준 모듈은 변경되지 않도록 하는 것이 **의존 역전 원칙**입니다.

## 5.2 의존 역전 원칙을 통한 변경의 유연함 확보
A 객체가 B 객체의 변화에 영향을 받는 것을 의존한다고 합니다.
고수준 모듈이 저수준 모듈에 의존하는 방향은 앞서 이야기 된 바와 같이 유지보수에 부담을 주므로
인터페이스로 한 단계 상속 받아 고수준 모듈과 저수준 모듈이 둘 다 의존하도록 만들었습니다.

## 5.3 소스 코드 의존과 런타임 의존
의존 역전 원칙은 소스 코드의 의존을 역전시킴으로써 변경(유지보수)의 유연함 확보를 함에 목적을 둠
런타임 상에서는 의존이 역전되지 않았습니다.

## 5.4 의존 역전 원칙과 패키지
기존 하위 모듈의 타입의 소유를 상위 모듈에 위치함으로써 기능의 모듈화를 가능하게 하여
기능의 분리 및 교체가 원활하게 될 것 같습니다.
